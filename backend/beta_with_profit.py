import os
import math
import httpx
import asyncio
import json
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Optional, List, Dict  # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

import pandas as pd
import psycopg2
import requests
from dotenv import load_dotenv

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv("api.env") # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ api.env –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
WB_API_KEY = os.getenv("WB_API_KEY")
DB_URL = os.getenv(
    "DB_URL",
    "postgresql://postgres:postgres@localhost:5432/wildberries",
)

tax_percent = 12 # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–ª–æ–≥–∞, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –±—Ä–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ sales
peremennaya_real_defect_percent = 2

# üïõ –î–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
glebas = 1 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è yesterday
yesterday = (datetime.utcnow() - timedelta(glebas)).date().isoformat()
print(yesterday)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Wildberries
# –ò—Å–ø–æ–ª—å–∑—É–µ–º WB_API_KEY, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" –∫–ª—é—á,
# –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä headers_standard
headers = {
    "Authorization": WB_API_KEY
}

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Å Wildberries API ---
def fetch_commissions():
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å Wildberries...")
    url = "https://common-api.wildberries.ru/api/v1/tariffs/commission"

    try:
        response = requests.get(url, headers=headers)
        # print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text) # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ –æ–±—ã—á–Ω–æ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω–æ
        response.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx

        raw_data = response.json()
        if not isinstance(raw_data, dict):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è dict, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(raw_data)}")

        data = raw_data.get("report", [])
        if not isinstance(data, list):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(data)}")

        commissions = {
            item["subjectName"].strip().lower(): item["kgvpSupplier"] # WB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ subjectName, –∞ –∫–æ–º–∏—Å—Å–∏—é –≤ kgvpSupplier
            for item in data if "subjectName" in item and "kgvpSupplier" in item
        }

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {len(commissions)}")
        return commissions

    except requests.exceptions.RequestException as e: # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ requests
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        return {}
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        return {}

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –ö–û–ú–ò–°–°–ò–ô ---
COMMISSIONS_DATA: Dict[str, float] = {} # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# --- –§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞, –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
async def startup_tasks():
    global COMMISSIONS_DATA
    COMMISSIONS_DATA = fetch_commissions()
    print(f"–ö–æ–º–∏—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {len(COMMISSIONS_DATA)}")

# === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å Content API ===
async def fetch_all_cards():
    url = "https://content-api.wildberries.ru/content/v2/get/cards/list"
    headers = {
        "Authorization": WB_API_KEY,
        "Content-Type": "application/json"
    }

    limit = 100
    cursor = {}
    all_cards = {} # nmID -> card_info

    async with httpx.AsyncClient(timeout=10) as client:
        while True:
            payload = {
                "settings": {
                    "cursor": {"limit": limit},
                    "filter": {"withPhoto": -1}
                }
            }

            if cursor:
                payload["settings"]["cursor"].update(cursor)

            response = await client.post(url, headers=headers, json=payload)
            response.raise_for_status()
            raw_data = response.json()

            cards = raw_data.get("cards", [])
            cursor_data = raw_data.get("cursor", {})
            total = cursor_data.get("total", 0)

            for card in cards:
                nmID = card.get("nmID")
                if nmID:
                    all_cards[nmID] = {
                        "imtID": card.get("imtID"),
                        "vendorCode": card.get("vendorCode"),
                        "brand": card.get("brand"),
                        "subjectName": card.get("subjectName") # subjectName –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
                    }

            if total < limit:
                break

            cursor = {
                "updatedAt": cursor_data.get("updatedAt"),
                "nmID": cursor_data.get("nmID")
            }

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(all_cards)}")
    return all_cards


def get_all_discounted_prices(api_key: str) -> dict:
    url = "https://discounts-prices-api.wildberries.ru/api/v2/list/goods/filter"
    headers = {
        "Authorization": WB_API_KEY
    }

    limit = 1000
    offset = 0
    result = {} # nmID -> discountedPrice

    while True:
        params = {
            "limit": limit,
            "offset": offset
        }

        try:
            response = requests.get(url, headers=headers, params=params)
            # print(response) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            response.raise_for_status()
            goods = response.json().get("data", {}).get("listGoods", [])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            break

        if not goods:
            break

        for item in goods:
            nm_id = item.get("nmID")
            sizes = item.get("sizes", [])
            if sizes and isinstance(sizes, list):
                discounted_price = sizes[0].get("discountedPrice", 0)
                result[nm_id] = discounted_price

        offset += limit

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω: {len(result)}")
    return result


# === 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥–∞–∂ ===
def get_sales_data(nmIDs: list, token: str):
    url = "https://seller-analytics-api.wildberries.ru/api/v2/nm-report/detail/history"
    headers = {"Authorization": WB_API_KEY}

    payload = {
        "nmIDs": nmIDs,
        "period": {
            "begin": yesterday,
            "end": yesterday
        },
        "timezone": "Europe/Moscow",
        "aggregationLevel": "day"
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        return data.get("data", [])
    except Exception as err:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        return []


# === 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ ===
def get_ad_metrics():
    API_KEY = WB_API_KEY
    url_campaigns = "https://advert-api.wildberries.ru/adv/v1/promotion/count"
    headers = {"Authorization": API_KEY, "Content-Type": "application/json"}

    r = requests.get(url_campaigns, headers=headers)
    if r.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏")
        return {}

    campaign_ids = []
    for group in r.json().get("adverts", []):
        for advert in group.get("advert_list", []):
            campaign_ids.append(advert.get("advertId"))

    body = [{"id": cid, "dates": [yesterday]} for cid in campaign_ids]

    url_stats = "https://advert-api.wildberries.ru/adv/v2/fullstats"
    response = requests.post(url_stats, headers=headers, data=json.dumps(body))
    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç—Ä–∏–∫ —Ä–µ–∫–ª–∞–º—ã")
        return {}

    data = response.json()
    aggregated = defaultdict(lambda: {
        "ad_views": 0, "ad_clicks": 0, "ad_ctr": 0, "ad_cpc": 0, "ad_spend": 0,
        "ad_atbs": 0, "ad_orders": 0, "ad_cr": 0, "ad_shks": 0, "ad_sum_price": 0
    })

    for campaign in data:
        for day in campaign.get("days", []):
            for app in day.get("apps", []):
                for item in app.get("nm", []):
                    nmID = item.get("nmId")
                    group = aggregated[nmID]
                    group["ad_views"] += safe_int(item.get("views"))
                    group["ad_clicks"] += safe_int(item.get("clicks"))
                    group["ad_spend"] += safe_int(item.get("sum"))
                    group["ad_atbs"] += safe_int(item.get("atbs"))
                    group["ad_orders"] += safe_int(item.get("orders"))
                    group["ad_shks"] += safe_int(item.get("shks"))
                    group["ad_sum_price"] += safe_int(item.get("sum_price"))

    for data in aggregated.values():
        views = data["ad_views"]
        clicks = data["ad_clicks"]
        orders = data["ad_orders"]
        data["ad_ctr"] = round((clicks / views) * 100, 2) if views else 0
        data["ad_cpc"] = round(data["ad_spend"] / clicks, 2) if clicks else 0
        data["ad_cr"] = round((orders / clicks) * 100, 2) if clicks else 0

    return aggregated


# === 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î ===
def save_sales_to_db(sales_data: list, cards_info: dict, ad_data: dict, actual_prices: dict):
    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ 'sales' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    # –î–æ–±–∞–≤–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è —Å BIGINT/REAL –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    # –í–ê–ñ–ù–û: subjectName –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
    cursor.execute("""
                   CREATE TABLE IF NOT EXISTS sales
                   (
                       "nm_ID"
                       BIGINT,
                       "date"
                       DATE,
                       "openCardCount"
                       BIGINT,
                       "addToCartCount"
                       BIGINT,
                       "ordersCount"
                       BIGINT,
                       "ordersSumRub"
                       REAL,
                       "buyoutsCount"
                       BIGINT,
                       "buyoutsSumRub"
                       REAL,
                       "buyoutPercent"
                       REAL,
                       "addToCartConversion"
                       REAL,
                       "cartToOrderConversion"
                       REAL,
                       "ad_views"
                       BIGINT,
                       "ad_clicks"
                       BIGINT,
                       "ad_ctr"
                       REAL,
                       "ad_cpc"
                       REAL,
                       "ad_spend"
                       REAL,
                       "ad_atbs"
                       BIGINT,
                       "ad_orders"
                       BIGINT,
                       "ad_cr"
                       REAL,
                       "ad_shks"
                       BIGINT,
                       "ad_sum_price"
                       REAL,
                       "brand"
                       TEXT,
                       "subjectName"
                       TEXT, -- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–û–¢ –°–¢–û–õ–ë–ï–¶ –°–£–©–ï–°–¢–í–£–ï–¢
                       "salePrice"
                       REAL,
                       "purchase_price"
                       REAL,
                       "delivery_to_warehouse"
                       REAL,
                       "wb_commission_rub"
                       REAL, -- –¢–ï–ü–ï–†–¨ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
                       "wb_logistics"
                       REAL,
                       "tax_rub"
                       REAL, -- –¢–ï–ü–ï–†–¨ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
                       "packaging"
                       REAL,
                       "fuel"
                       REAL,
                       "gift"
                       REAL,
                       "real_defect_percent"
                       REAL,
                       "ad_manager_name"
                       TEXT,
                       "defect_percent"
                       REAL,
                       "cost_price"
                       REAL, -- –¢–ï–ü–ï–†–¨ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
                       "profit_per_item"
                       REAL, -- –¢–ï–ü–ï–†–¨ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–¢–°–Ø –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò
                       "commission_percent"
                       REAL, -- –¢–ï–ü–ï–†–¨ –•–†–ê–ù–ò–¢ –ü–†–û–¶–ï–ù–¢ WB
                       "total_profit"
                       REAL,
                       "vendorCode"
                       TEXT,
                       "imtID"
                       BIGINT,
                       "imtName"
                       TEXT,
                       "actual_discounted_price"
                       REAL,
                       PRIMARY
                       KEY
                   (
                       "nm_ID",
                       "date"
                   )
                       );
                   """)
    conn.commit()

    # Ensure new columns exist and have default values
    cursor.execute('ALTER TABLE sales ADD COLUMN IF NOT EXISTS "real_defect_percent" REAL')
    cursor.execute('ALTER TABLE sales ADD COLUMN IF NOT EXISTS "ad_manager_name" TEXT')
    cursor.execute('ALTER TABLE sales ADD COLUMN IF NOT EXISTS "card_changes" TEXT')
    conn.commit()
    cursor.execute('UPDATE sales SET "real_defect_percent" = 2 WHERE "real_defect_percent" IS NULL')
    cursor.execute("UPDATE sales SET \"ad_manager_name\" = '0' WHERE \"ad_manager_name\" IS NULL")
    cursor.execute("UPDATE sales SET \"card_changes\" = '0' WHERE \"card_changes\" IS NULL")
    conn.commit()

    # üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏ —Ç–∞–±–ª–∏—Ü—ã sales
    cursor.execute(
        """
        SELECT DISTINCT ON ("nm_ID") "nm_ID", "imtID", brand, "subjectName", purchase_price,
               delivery_to_warehouse, wb_logistics, packaging, fuel, gift,
               real_defect_percent, ad_manager_name, card_changes
        FROM sales
        ORDER BY "nm_ID", "date" DESC
        """
    )
    card_details_raw = cursor.fetchall()
    card_details = {
        row[0]: {
            "imtID": row[1],
            "brand": row[2] or "",
            "subjectName": row[3] or "",  # subjectName —Ç–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏
            "purchase_price": row[4] or 0,
            "delivery_to_warehouse": row[5] or 0,
            "wb_logistics": row[6] or 0,
            "packaging": row[7] or 0,
            "fuel": row[8] or 0,
            "gift": row[9] or 0,
            "real_defect_percent": row[10] or peremennaya_real_defect_percent,
            "ad_manager_name": row[11] or '0',
            "card_changes": row[12] or '0',
            # 'cost_price', 'profit_per_item', 'wb_commission_rub', 'tax_rub', 'commission_percent'
            # —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        } for row in card_details_raw
    }

    cursor.execute(
        """
        SELECT DISTINCT ON ("imtID") "imtID", ad_manager_name, card_changes
        FROM sales
        ORDER BY "imtID", "date" DESC
        """
    )
    imt_details_raw = cursor.fetchall()
    imt_fallback = {
        row[0]: {
            "ad_manager_name": row[1] or '0',
            "card_changes": row[2] or '0'
        }
        for row in imt_details_raw
    }

    for entry in sales_data:
        vendorCode = entry.get("vendorCode", "")
        imtID = entry.get("imtID", 0)

        nmID = entry["nmID"]
        imtName = entry["imtName"]
        for record in entry["history"]:
            date_value = record["dt"] # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ 'dt'

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò AttributeError: 'str' object has no attribute 'date' ---
            if isinstance(date_value, str):
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏.
                    # –§–æ—Ä–º–∞—Ç WB API –º–æ–∂–µ—Ç –±—ã—Ç—å 'YYYY-MM-DDTHH:MM:SSZ' –∏–ª–∏ 'YYYY-MM-DD'
                    if 'T' in date_value: # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è, –∫–∞–∫ '2025-06-09T00:00:00Z'
                        # –ó–∞–º–µ–Ω—è–µ–º 'Z' –Ω–∞ '+00:00' –¥–ª—è fromisoformat
                        date_obj = datetime.fromisoformat(date_value.replace('Z', '+00:00'))
                    else: # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ '2025-06-09'
                        date_obj = datetime.strptime(date_value, '%Y-%m-%d')
                except ValueError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: '{date_value}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É UTC.")
                    date_obj = datetime.utcnow() # Fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É UTC
            elif isinstance(date_value, datetime):
                date_obj = date_value # –ï—Å–ª–∏ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞—Ç—ã: {type(date_value)}. –ó–Ω–∞—á–µ–Ω–∏–µ: '{date_value}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É UTC.")
                date_obj = datetime.utcnow() # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

            record["date"] = date_obj.date().isoformat() # –¢–µ–ø–µ—Ä—å 'date' —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ 'YYYY-MM-DD'
            # record.pop("dt") # –ï—Å–ª–∏ –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á 'dt', –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            date_for_db = record["date"] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ë–î

            quantity = record.get("ordersCount", 0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

            ad_spend = ad_data.get(nmID, {}).get("ad_spend", 0)
            actual_price = actual_prices.get(nmID, 0) # –≠—Ç–æ actual_discounted_price


            # --- –ù–û–í–´–ô –†–ê–°–ß–ï–¢: wb_commission_rub –∏ tax_rub ---
            commission_percent_for_item = 0
            calculated_wb_commission_rub = 0
            calculated_tax_rub = 0

            # –ü–æ–ª—É—á–∞–µ–º subjectName –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ nmID –∏–∑ cards_info (–ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑ Content API)
            # –∏–ª–∏ –∏–∑ card_details (–ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑ –ë–î 'cards')
            subject_name_from_info = cards_info.get(nmID, {}).get("subjectName") or card_details.get(nmID, {}).get("subjectName")

            if actual_price > 0 and subject_name_from_info:
                subject_name_lower = subject_name_from_info.strip().lower()
                if subject_name_lower in COMMISSIONS_DATA:
                    commission_percent_for_item = COMMISSIONS_DATA[subject_name_lower]
                    # –§–æ—Ä–º—É–ª–∞ wb_commission_rub: actual_discounted_price / 100 * comissiom_percent + 1.1
                    calculated_wb_commission_rub = actual_price / 100 * (commission_percent_for_item + 1.1)
                # –§–æ—Ä–º—É–ª–∞ tax_rub: actual_discounted_price / 100 * tax_percent
                calculated_tax_rub = (actual_price / 100 * tax_percent)
            # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –†–ê–°–ß–ï–¢–ê ---


            # === –ü–µ—Ä–µ—Å—á–µ—Ç cost_price ===
            purchase_price = card_details.get(nmID, {}).get("purchase_price", 0)
            delivery_to_warehouse = card_details.get(nmID, {}).get("delivery_to_warehouse", 0)
            wb_logistics = card_details.get(nmID, {}).get("wb_logistics", 0)
            packaging = card_details.get(nmID, {}).get("packaging", 0)
            fuel = card_details.get(nmID, {}).get("fuel", 0)
            gift = card_details.get(nmID, {}).get("gift", 0)
            real_defect_percent = card_details.get(nmID, {}).get(
                "real_defect_percent", peremennaya_real_defect_percent
            )
            ad_manager_name = card_details.get(nmID, {}).get("ad_manager_name", '0')
            if ad_manager_name in [None, '', '0']:
                fallback = imt_fallback.get(imtID, {}).get("ad_manager_name")
                if fallback not in [None, '', '0']:
                    ad_manager_name = fallback
            card_changes_val = card_details.get(nmID, {}).get("card_changes", '0')
            if card_changes_val in [None, '', '0']:
                cc_fallback = imt_fallback.get(imtID, {}).get("card_changes")
                if cc_fallback not in [None, '', '0']:
                    card_changes_val = cc_fallback
            defect_percent = actual_price / 100 * real_defect_percent

            # –§–æ—Ä–º—É–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            calculated_cost_price = (
                purchase_price
                + delivery_to_warehouse
                + calculated_wb_commission_rub
                + wb_logistics
                + calculated_tax_rub
                + packaging
                + fuel
                + gift
                + defect_percent
            )


            # === –ü–µ—Ä–µ—Å—á–µ—Ç profit_per_item –∏ total_profit ===
            calculated_profit_per_item = actual_price - calculated_cost_price
            calculated_total_profit = round((calculated_profit_per_item * quantity) - ad_spend, 2)


            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            merged = {
                **record,
                **ad_data.get(nmID, {}),
                "total_profit": calculated_total_profit, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é
                "vendorCode": vendorCode,
                "imtID": cards_info.get(nmID, {}).get("imtID", None),
                "imtName": imtName,
                "actual_discounted_price": actual_price,
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                "wb_commission_rub": calculated_wb_commission_rub,
                "tax_rub": calculated_tax_rub,
                "commission_percent": commission_percent_for_item, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ WB
                "cost_price": calculated_cost_price, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                "profit_per_item": calculated_profit_per_item, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É

                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ cards_details, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –∏ –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
                "brand": card_details.get(nmID, {}).get("brand", ""),
                "subjectName": subject_name_from_info, # –°–æ—Ö—Ä–∞–Ω—è–µ–º subjectName, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏
                "purchase_price": purchase_price,
                "delivery_to_warehouse": delivery_to_warehouse,
                "wb_logistics": wb_logistics,
                "packaging": packaging,
                "fuel": fuel,
                "gift": gift,
                "real_defect_percent": real_defect_percent,
                "defect_percent": defect_percent,
                "ad_manager_name": ad_manager_name,
                "card_changes": card_changes_val,
            }

            merged["nm_ID"] = nmID # nm_ID —É–∂–µ –µ—Å—Ç—å –≤ record, –Ω–æ —è–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            # merged["date"] —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—à–µ

            # --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ ensure_columns_exist –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ---
            for key, value in merged.items():
                if isinstance(value, float) and math.isnan(value):
                    merged[key] = 0 # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º NaN –≤ 0

            # print(merged) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞

            # –ü–µ—Ä–µ–¥–∞–µ–º merged –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            ensure_columns_exist(conn, "sales", merged)

            cursor.execute(
                "SELECT COUNT(*) FROM sales WHERE \"nm_ID\" = %s AND \"date\" = %s",
                (nmID, date_for_db),
            )
            exists = cursor.fetchone()[0] > 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            data_for_db_values = merged.copy() # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π merged

            if "nm_ID" in data_for_db_values:
                del data_for_db_values["nm_ID"]
            if "date" in data_for_db_values:
                del data_for_db_values["date"]

            columns_list = list(data_for_db_values.keys())
            values_list = list(data_for_db_values.values())

            # --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –û–¢–õ–ê–î–û–ß–ù–´–ï –ü–†–ò–ù–¢–´ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
            print("\n--- –û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞ ---")
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ nm_ID: {nmID}, date: {date_for_db}")
            print(f"–°—Ç–∞—Ç—É—Å: {'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ' if exists else '–í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏'}")
            print("–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (–±–µ–∑ nm_ID –∏ date):")
            print(columns_list)
            print("–°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π (–±–µ–∑ nm_ID –∏ date):")
            for i, val in enumerate(values_list):
                col_name = columns_list[i]
                print(f"  {col_name}: {val} (–¢–∏–ø: {type(val)})")
                if isinstance(val, int) and (val > 2147483647 or val < -2147483648):
                    print(f"  !!! –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ INTEGER –¥–ª—è '{col_name}' !!!")
                elif isinstance(val, float) and (val > 1.0e300 or val < -1.0e300):
                    print(f"  !!! –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ/–º–∞–ª–æ–µ REAL –¥–ª—è '{col_name}' !!!")
                elif val == 0 and col_name in ["gift", "defect_percent"]: # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
                    print(f"  –ò–ù–§–û: –ó–Ω–∞—á–µ–Ω–∏–µ '{col_name}' –±—ã–ª–æ NaN/None –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ 0.")

            print("--- –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ---\n")
            # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–´–• –û–¢–õ–ê–î–û–ß–ù–´–• –ü–†–ò–ù–¢–û–í ---

            if exists:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                placeholders = ", ".join([f'"{k}" = %s' for k in columns_list])
                values_to_execute = values_list + [nmID, date_for_db] # –î–æ–±–∞–≤–ª—è–µ–º nmID –∏ date –¥–ª—è WHERE
                cursor.execute(
                    f'UPDATE sales SET {placeholders} WHERE "nm_ID" = %s AND "date" = %s',
                    values_to_execute,
                )

            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                columns = ["nm_ID", "date"] + columns_list
                values = [nmID, date_for_db] + values_list
                placeholders = ", ".join(["%s"] * len(columns))
                quoted_columns = ', '.join(f'"{col}"' for col in columns)

                cursor.execute(
                    f"INSERT INTO sales ({quoted_columns}) VALUES ({placeholders})",
                    values,
                )

    conn.commit()
    conn.close()


# === 5. –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ===
async def main():
    await startup_tasks() # –í—ã–∑—ã–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∏—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    token = WB_API_KEY
    cards_info = await fetch_all_cards() # –ü–æ–ª—É—á–∞–µ–º subjectName –∑–¥–µ—Å—å
    actual_prices = get_all_discounted_prices(WB_API_KEY)
    nm_ids = list(cards_info.keys())

    batch_size = 20
    all_sales = []

    # –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
    # –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –≤–µ—Ä–Ω–∏—Ç–µ len(nm_ids)
    for i in range(0, (len(nm_ids)), batch_size): # –û–≥—Ä–∞–Ω–∏—á–∏–ª –¥–æ –ø–µ—Ä–≤—ã—Ö 20 nm_ids –¥–ª—è —Ç–µ—Å—Ç–∞
        batch = nm_ids[i:i + batch_size]
        print(f"‚è≥ –ó–∞–ø—Ä–æ—Å {i // batch_size + 1} –∏–∑ {len(nm_ids) // batch_size + 1}")
        sales_data = get_sales_data(batch, token)
        all_sales.extend(sales_data)
        await asyncio.sleep(20) # –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞

    ad_metrics = get_ad_metrics()
    save_sales_to_db(all_sales, cards_info, ad_metrics, actual_prices)
    print("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")


def calculate_total_profit_for_day():
    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    yesterday_str = (datetime.utcnow() - timedelta(glebas)).date().isoformat()
    cursor.execute(
        "SELECT total_profit FROM sales WHERE \"date\" = %s", # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è "date"
        (yesterday_str,),
    )
    rows = cursor.fetchall()

    # –°—É–º–º–∏—Ä—É–µ–º profit
    total = sum(row[0] for row in rows if row[0] is not None)

    print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ {yesterday_str}: {total:.2f} ‚ÇΩ")
    conn.close()


def export_sales_to_excel():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(DB_URL)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    yesterday_str = (datetime.utcnow() - timedelta(glebas)).date().isoformat()

    # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∑–∞ –≤—á–µ—Ä–∞
    query = "SELECT * FROM sales WHERE \"date\" = %s" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏ –¥–ª—è "date"
    df = pd.read_sql_query(query, conn, params=(yesterday_str,))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    filename = f"sales_export_{yesterday_str}.xlsx"
    df.to_excel(filename, index=False)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")

    conn.close()


def ensure_columns_exist(conn, table_name, data_dict):
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    cursor.execute(
        "SELECT column_name FROM information_schema.columns WHERE table_name = %s",
        (table_name,),
    )
    existing_columns = [row[0] for row in cursor.fetchall()]

    for key, value in data_dict.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º nm_ID –∏ date, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤ PRIMARY KEY –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
        if key == "nm_ID" or key == "date":
            continue

        if key not in existing_columns:
            print(f"üõ† –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü: {key}")

            column_type = "TEXT" # –¢–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
            # –†–∞—Å—à–∏—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å REAL –∏–ª–∏ BIGINT
            if key in [
                "total_profit", "actual_discounted_price", "ad_spend", "ad_ctr", "ad_cpc", "ad_cr",
                "ordersSumRub", "buyoutsSumRub", "buyoutPercent", "addToCartConversion",
                "cartToOrderConversion", "salePrice", "purchase_price", "delivery_to_warehouse",
                "wb_commission_rub", "wb_logistics", "tax_rub", "packaging", "fuel", "gift",
                "defect_percent", "real_defect_percent", "cost_price", "profit_per_item", "commission_percent"
            ]:
                column_type = "REAL"
            elif key in [
                "ad_views", "ad_clicks", "ad_atbs", "ad_orders", "ad_shks", "ordersCount",
                "openCardCount", "addToCartCount", "buyoutsCount", "imtID"
            ]:
                column_type = "BIGINT" # –ò—Å–ø–æ–ª—å–∑—É–µ–º BIGINT –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            elif isinstance(value, float):
                # –ï—Å–ª–∏ —ç—Ç–æ float, –Ω–æ –Ω–µ NaN, –∏ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —è–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏, —Ç–æ REAL
                column_type = "REAL"
            elif isinstance(value, int):
                # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–±–æ–ª—å—à–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º INTEGER, –∏–Ω–∞—á–µ BIGINT
                if value > 2147483647 or value < -2147483648: # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ/–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INTEGER
                    column_type = "BIGINT"
                else:
                    column_type = "INTEGER"
            elif isinstance(value, bool):
                column_type = "BOOLEAN"
            elif isinstance(value, (list, dict)):
                column_type = "JSONB"
            elif value is None:
                column_type = "TEXT" # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None (–≤–∫–ª—é—á–∞—è NaN –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤ None), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TEXT. –ù–æ –º—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0.

            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞
                cursor.execute(f'ALTER TABLE {table_name} ADD COLUMN "{key}" {column_type}')
                conn.commit()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {key}: {e}")
                conn.rollback()


def safe_int(val):
    try:
        return int(val) if val is not None else 0
    except (ValueError, TypeError):
        return 0


def calculate_bundle_profits():
    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("""
                   SELECT "imtID", "imtName", "total_profit"
                   FROM sales
                   WHERE "date" = (SELECT MAX("date") FROM sales)
                   """)
    rows = cursor.fetchall()
    conn.close()

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–≤—è–∑–∫–∞–º (–ø–æ imtID)
    bundles = defaultdict(list)

    for imtID, imtName, profit in rows:
        profit = profit or 0 # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ NULL
        bundles[imtID].append({"imtName": imtName, "profit": profit})

    # –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–±—ã–ª—å –ø–æ –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∫–µ –∏ –≤—ã–±–∏—Ä–∞–µ–º –∏–º—è
    results = []
    for imtID, items in bundles.items():
        total = sum(item["profit"] for item in items)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ items –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º max
        best_item = max(items, key=lambda x: x["profit"]) if items else {"imtName": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        results.append({
            "imtID": imtID,
            "title": best_item["imtName"],
            "total_profit": round(total, 2)
        })

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("üì¶ –ü—Ä–∏–±—ã–ª—å –ø–æ —Å–≤—è–∑–∫–∞–º:")
    for bundle in sorted(results, key=lambda x: -x["total_profit"]):
        print(f"{bundle['title']} ‚Üí {bundle['total_profit']} ‚ÇΩ")

    return results # –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ FastAPI


def calculate_profit_by_bundles():
    # –í—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    yesterday_str = (datetime.utcnow() - timedelta(glebas)).date().isoformat()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—á–µ—Ä–∞—à–Ω–µ–º—É –¥–Ω—é
    cursor.execute(
        """
        SELECT "imtID", "imtName", "vendorCode", "cost_price", "total_profit", "ordersCount"
        FROM sales
        WHERE "imtID" IS NOT NULL
          AND "total_profit" IS NOT NULL
          AND "date" = %s
        """,
        (yesterday_str,),
    )
    rows = cursor.fetchall()

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–≤—è–∑–∫–∞–º
    bundles = {}
    for imtID, imtName, vendorCode, cost_price, profit, orders in rows:
        if imtID not in bundles:
            bundles[imtID] = []
        bundles[imtID].append({
            "imtName": imtName,
            "vendorCode": vendorCode,
            "cost_price": cost_price,
            "profit": profit,
            "ordersCount": orders # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å ordersCount
        })

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = []
    for imtID, items in bundles.items():
        total_profit = sum(item["profit"] for item in items)
        best_item = max(items, key=lambda x: x["profit"]) if items else {"imtName": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        results.append({
            "imtID": imtID,
            "title": best_item["imtName"],
            "total_profit": round(total_profit, 2),
            "items": items
        })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    results = sorted(results, key=lambda x: -x["total_profit"])

    # –í—ã–≤–æ–¥
    print(f"\nüìä –ü—Ä–∏–±—ã–ª—å –ø–æ —Å–≤—è–∑–∫–∞–º –∑–∞ {yesterday_str}:")
    for bundle in results:
        print(f"\nüîπ {bundle['title']} ‚Üí {bundle['total_profit']} ‚ÇΩ")
        print("   üì¶ –¢–æ–≤–∞—Ä—ã –≤ —Å–≤—è–∑–∫–µ:")
        for item in bundle["items"]:
            print(
                f"     ‚Ä¢ {item['vendorCode']} | –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {item['cost_price']} ‚ÇΩ | –ó–∞–∫–∞–∑–æ–≤: {item['ordersCount']} —à—Ç")


if __name__ == "__main__":
    asyncio.run(main())
    calculate_total_profit_for_day()
    calculate_profit_by_bundles()

