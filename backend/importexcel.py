import pandas as pd
import psycopg2
import os

DB_URL = os.getenv(
    "DB_URL",
    "postgresql://postgres:postgres@localhost:5432/wildberries",
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª
df_excel = pd.read_excel("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ö –∏—é–Ω—å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π1.xlsx")

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
df_excel = df_excel.rename(columns={
    "vendorCode": "vendorCode",
    "zakup": "purchase_price",
    "–¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –°–º": "delivery_to_warehouse",
    "–ö–æ–º–∏—Å—Å–∏—è –í–ë, —Ä—É–±": "wb_commission_rub",
    "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –í–ë, —Ä—É–±": "wb_logistics",
    "–ù–∞–ª–æ–≥ 12%, —Ä—É–±": "tax_rub",
    "–£–ø–∞–∫–æ–≤–∫–∞": "packaging",
    "–ë–µ–Ω–∑–∏–Ω": "fuel",
    "–ø–æ–¥–∞—Ä–æ–∫+": "gift",
    "98% –∫–∞—á–µ—Å—Ç–≤–æ": "defect_percent",
    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": "cost_price"
})

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
df_filtered = df_excel[[
    "vendorCode", "purchase_price", "delivery_to_warehouse", "wb_commission_rub",
    "wb_logistics", "tax_rub", "packaging", "fuel", "gift", "defect_percent", "cost_price"
]].dropna(subset=["vendorCode"])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(DB_URL)
cursor = conn.cursor()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
new_columns = {
    "purchase_price": "REAL",
    "delivery_to_warehouse": "REAL",
    "wb_commission_rub": "REAL",
    "wb_logistics": "REAL",
    "tax_rub": "REAL",
    "packaging": "REAL",
    "fuel": "REAL",
    "gift": "REAL",
    "defect_percent": "REAL",
    "cost_price": "REAL",
    "salePrice": "REAL",  # üîß –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ salePrice
    "profit_per_item": "REAL",  # üîß –∏ —Å—Ä–∞–∑—É –∫–æ–ª–æ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª–∏
}

for column, col_type in new_columns.items():
    try:
        cursor.execute(f"ALTER TABLE cards ADD COLUMN {column} {col_type}")
    except Exception:
        conn.rollback()  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ vendorCode
for _, row in df_filtered.iterrows():
    try:
        gift = 0 if str(row['gift']).strip() == "" else row['gift']

        cursor.execute(
            """
            UPDATE cards
            SET purchase_price        = %s,
                delivery_to_warehouse = %s,
                wb_commission_rub     = %s,
                wb_logistics          = %s,
                tax_rub               = %s,
                packaging             = %s,
                fuel                  = %s,
                gift                  = %s,
                defect_percent        = %s,
                cost_price            = %s
            WHERE vendor_code = %s
            """,
            (
                row["purchase_price"],
                row["delivery_to_warehouse"],
                row["wb_commission_rub"],
                row["wb_logistics"],
                row["tax_rub"],
                row["packaging"],
                row["fuel"],
                gift,
                row["defect_percent"],
                row["cost_price"],
                str(row["vendorCode"]),
            ),
        )
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ vendorCode={row['vendorCode']}: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
try:
    cursor.execute("""
        UPDATE cards
        SET profit_per_item = salePrice - cost_price
        WHERE salePrice IS NOT NULL AND cost_price IS NOT NULL
    """)
except Exception as e:
    conn.rollback()
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–∏–±—ã–ª–∏: {e}")

conn.commit()
cursor.close()
conn.close()

print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–±—ã–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.")
