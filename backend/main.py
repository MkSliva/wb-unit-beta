from fastapi import FastAPI, Query, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, List
import os
import psycopg2
import pandas as pd
import numpy as np
import requests  # –î–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from datetime import datetime, date, timedelta

app = FastAPI()

# ‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DB_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
DB_URL = os.getenv(
    "DB_URL",
    "postgresql://postgres:postgres@localhost:5432/wildberries",
)

# --- Telegram Bot API –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–û–í–ò–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ù–ê –í–ê–®–ï–ú –°–ï–†–í–ï–†–ï!
# –ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN="YOUR_BOT_TOKEN"
# –ü—Ä–∏–º–µ—Ä: export TELEGRAM_CHAT_ID="YOUR_CHAT_ID"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TELEGRAM_BOT_TOKEN_HERE")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_TELEGRAM_CHAT_ID_HERE")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_methods=["*"],
    allow_headers=["*"]
)


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    print(f"Server Error occurred at path: {request.url.path}")
    print(f"Exception Type: {type(exc).__name__}")
    print(f"Exception Detail: {exc}")
    import traceback
    traceback.print_exc()  # –í—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –≤ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞–º–∏—Ç—å)
    # send_telegram_notification(f"üö® –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {request.url.path} - {type(exc).__name__} - {exc}")

    return JSONResponse(
        status_code=500,
        content={"message": f"Internal Server Error: {type(exc).__name__} - {exc}"}
    )


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
def send_telegram_notification(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload, timeout=5)
        response.raise_for_status()  # –í—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–æ—Ö–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (4xx –∏–ª–∏ 5xx)
        print("Telegram notification sent successfully.")
    except requests.exceptions.RequestException as e:
        print(f"Failed to send Telegram notification: {e}")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è purchase_price –≤ sales ---
def update_sales_purchase_prices(df: pd.DataFrame, conn_obj):
    if df.empty:
        return df

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'date' –≤ df - datetime
    df["date"] = pd.to_datetime(df["date"])

    vendor_codes = tuple(df["vendorcode"].unique())
    if not vendor_codes:  # –ï—Å–ª–∏ –Ω–µ—Ç vendor_codes, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º df –∫–∞–∫ –µ—Å—Ç—å
        return df

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –Ω—É–∂–Ω—ã—Ö vendor_codes
    query_batches = f"""
        SELECT vendor_code, purchase_price, quantity_bought, quantity_sold, start_date, end_date
        FROM purchase_batches
        WHERE vendor_code IN %s
        ORDER BY vendor_code, start_date DESC;
    """
    batches_df = pd.read_sql_query(query_batches, conn_obj, params=(vendor_codes,))
    batches_df["start_date"] = pd.to_datetime(batches_df["start_date"])
    # end_date –º–æ–∂–µ—Ç –±—ã—Ç—å NULL, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ. 'coerce' –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ NaT.
    batches_df["end_date"] = pd.to_datetime(batches_df["end_date"], errors='coerce')

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é purchase_price –∏–∑ sales, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –∫–∞–∫ fallback
    df['original_sales_purchase_price'] = df['purchase_price']

    # –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ df (–ø—Ä–æ–¥–∞–∂–∏), –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é purchase_price
    def get_purchase_price_for_sale(row, batches_df_local):  # –ü–µ—Ä–µ–¥–∞–µ–º batches_df –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        vendor = row["vendorcode"]
        sale_date = row["date"]
        original_sales_price = row["original_sales_purchase_price"]  # –ë–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É –∏–∑ sales

        # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏
        active_batches = batches_df_local[
            (batches_df_local["vendor_code"] == vendor) &
            (batches_df_local["start_date"] <= sale_date) &
            (
                    (batches_df_local["end_date"].isna()) |  # end_date is NULL (–ø–∞—Ä—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–∞)
                    (batches_df_local["end_date"] >= sale_date)  # –∏–ª–∏ end_date –ø–æ—Å–ª–µ –∏–ª–∏ –≤ –¥–µ–Ω—å –ø—Ä–æ–¥–∞–∂–∏
            )
            ].sort_values(by="start_date", ascending=False)  # –ë–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é

        if not active_batches.empty:
            return active_batches.iloc[0]["purchase_price"]
        else:
            # –ï—Å–ª–∏ –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º original_sales_purchase_price –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sales
            return original_sales_price

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ DataFrame
    df["purchase_price"] = df.apply(lambda row: get_purchase_price_for_sale(row, batches_df), axis=1)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    df = df.drop(columns=['original_sales_purchase_price'])

    return df


@app.get("/api/test_telegram_notification")
async def test_telegram_notification(
        message: str = Query("Test message from FastAPI backend!", description="Message to send to Telegram")):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID.
    """
    try:
        send_telegram_notification(f"<b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b> {message}")
        return {"status": "success", "message": "Test notification sent!"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to send test notification: {e}")


## –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö

### –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
@app.get("/api/sales_grouped_detailed_range")
def get_sales_grouped_detailed_range(
        start_date: str = Query(..., description="Start date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
        end_date: str = Query(..., description="End date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
):
    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º conn –¥–ª—è –±–ª–æ–∫–∞ finally
    try:
        conn = psycopg2.connect(DB_URL)

        query = """
                SELECT "imtID", \
                       "vendorCode", \
                       "ordersCount", \
                       "ad_spend", \
                       "actual_discounted_price",
                       "purchase_price",
                       "delivery_to_warehouse", \
                       "wb_commission_rub",
                       "wb_logistics", \
                       "tax_rub", \
                       "packaging", \
                       "fuel", \
                       "gift", \
                       "defect_percent", date
                FROM sales
                WHERE date BETWEEN %s \
                  AND %s \
                """
        df = pd.read_sql_query(query, conn, params=(start_date, end_date))
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ pandas
        df.columns = df.columns.str.lower()
        df["date"] = pd.to_datetime(df["date"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        if df.empty:
            return {
                "message": f"No data between {start_date} and {end_date}",
                "data": [],
                "total_profit": 0
            }

        df = df.fillna(0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–∞–º–∏

        # --- –û–ë–ù–û–í–õ–Ø–ï–ú purchase_price –ù–ê –û–°–ù–û–í–ï –ü–ê–†–¢–ò–ô –ò–õ–ò sales.purchase_price ---
        df = update_sales_purchase_prices(df, conn)
        # --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º cost_price –∏ profit –≤ pandas
        df["cost_price"] = (
                df["purchase_price"] + df["delivery_to_warehouse"] + df["wb_commission_rub"] +
                df["wb_logistics"] + df["tax_rub"] + df["packaging"] +
                df["fuel"] + df["gift"] + df["defect_percent"]
        )
        df["orderscount"] = df["orderscount"].astype(int)
        df["profit"] = (df["actual_discounted_price"] - df["cost_price"]) * df["orderscount"] - df["ad_spend"]

        df["investment_total"] = (
                df["purchase_price"] + df["delivery_to_warehouse"] + df["packaging"] +
                df["fuel"] + df["gift"]
        ) * df["orderscount"]

        grouped = df.groupby("imtid").agg({
            "orderscount": "sum",
            "ad_spend": "sum",
            "profit": "sum",
            "investment_total": "sum"
        }).reset_index()

        max_sales_per_vendorcode = df.loc[df.groupby('imtid')['orderscount'].idxmax()]
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º vendorcode –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        max_sales_per_vendorcode = max_sales_per_vendorcode[['imtid', 'vendorcode']].rename(
            columns={'vendorcode': 'best_selling_vendorcode'})

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –Ω–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        grouped = pd.merge(grouped, max_sales_per_vendorcode, on='imtid', how='left')

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º vendorCode –¥–ª—è –∫–∞–∂–¥–æ–π imtID
        grouped["vendorcodes"] = grouped["imtid"].apply(
            lambda imt: ", ".join(str(v) for v in df[df["imtid"] == imt]["vendorcode"].unique())
        )

        grouped = grouped.rename(columns={"profit": "total_profit"})
        grouped["margin_percent"] = grouped.apply(
            lambda row: (row["total_profit"] / row["investment_total"] * 100)
            if row["investment_total"] != 0 else 0,
            axis=1,
        )
        grouped = grouped.drop(columns=["investment_total"])
        total_profit = round(grouped["total_profit"].sum(), 2)
        total_orders = int(df["orderscount"].sum())
        total_ad_spend = round(df["ad_spend"].sum(), 2)

        return {
            "start_date": start_date,
            "end_date": end_date,
            "total_profit": total_profit,
            "total_orders": total_orders,
            "total_ad_spend": total_ad_spend,
            "data": grouped.to_dict(orient="records")
        }
    finally:
        if conn:
            conn.close()


### –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π imtID, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ vendorCode
@app.get("/api/sales_by_imt")
def get_sales_by_imt(
        imt_id: int,
        start_date: str = Query(..., description="Start date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
        end_date: str = Query(..., description="End date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)

        query = """
                SELECT date, "ordersCount", "ad_spend", "salePrice", "purchase_price", "delivery_to_warehouse", "wb_commission_rub", "wb_logistics", "tax_rub", "packaging", "fuel", "gift", "defect_percent", "actual_discounted_price", "vendorCode"
                FROM sales
                WHERE "imtID" = %s \
                  AND date BETWEEN %s \
                  AND %s
                ORDER BY date ASC \
                """

        df = pd.read_sql_query(query, conn, params=(imt_id, start_date, end_date))
        df.columns = df.columns.str.lower()
        df["date"] = pd.to_datetime(df["date"])

        if df.empty:
            return {
                "message": f"No data for imtID {imt_id} between {start_date} and {end_date}",
                "data": []
            }

        df = df.fillna(0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–∞–º–∏

        # --- –û–ë–ù–û–í–õ–Ø–ï–ú purchase_price –ù–ê –û–°–ù–û–í–ï –ü–ê–†–¢–ò–ô –ò–õ–ò sales.purchase_price ---
        df = update_sales_purchase_prices(df, conn)
        # --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º cost_price –∏ profit
        df["cost_price"] = (
                df["purchase_price"] + df["delivery_to_warehouse"] + df["wb_commission_rub"] +
                df["wb_logistics"] + df["tax_rub"] + df["packaging"] +
                df["fuel"] + df["gift"] + df["defect_percent"]
        )
        df["orderscount"] = df["orderscount"].astype(int)
        df["profit"] = (df["actual_discounted_price"] - df["cost_price"]) * df["orderscount"] - df["ad_spend"]

        grouped = df.groupby("vendorcode").agg({
            "orderscount": "sum",
            "ad_spend": "sum",
            "profit": "sum",
            "actual_discounted_price": "mean",  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            "cost_price": "mean",  # –°—Ä–µ–¥–Ω—è—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            "purchase_price": "mean",  # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ä–µ–¥–Ω—è—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö purchase_price
            "delivery_to_warehouse": "mean",
            "wb_commission_rub": "mean",
            "wb_logistics": "mean",
            "tax_rub": "mean",
            "packaging": "mean",
            "fuel": "mean",
            "gift": "mean",
            "defect_percent": "mean"
        }).reset_index()

        grouped = grouped.rename(columns={"profit": "total_profit"})

        return {
            "imtID": imt_id,
            "start_date": start_date,
            "end_date": end_date,
            "data": grouped.to_dict(orient="records")
        }
    finally:
        if conn:
            conn.close()


### –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π imtID (–£–ñ–ï –ü–û–î–•–û–î–ò–¢ –î–õ–Ø –ì–†–ê–§–ò–ö–û–í –ü–†–ò–ë–´–õ–ò, –ó–ê–ö–ê–ó–û–í, –†–ï–ö–õ–ê–ú–´)
@app.get("/api/sales_by_imt_daily")
def get_sales_by_imt_daily(
        imt_id: int,
        start_date: str = Query(..., description="Start date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
        end_date: str = Query(..., description="End date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)

        query = """
                SELECT date, "ordersCount", "ad_spend", "salePrice", "purchase_price", "delivery_to_warehouse", "wb_commission_rub", "wb_logistics", "tax_rub", "packaging", "fuel", "gift", "defect_percent", "actual_discounted_price", "vendorCode"
                FROM sales
                WHERE "imtID" = %s \
                  AND date BETWEEN %s \
                  AND %s
                ORDER BY date ASC \
                """

        df = pd.read_sql_query(query, conn, params=(imt_id, start_date, end_date))
        df.columns = df.columns.str.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        df["date"] = pd.to_datetime(df["date"])

        if df.empty:
            return {
                "message": f"No data for imtID {imt_id} between {start_date} and {end_date}",
                "data": []
            }

        df = df.fillna(0)  # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –Ω—É–ª—è–º–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–∞–º–∏

        # --- –û–ë–ù–û–í–õ–Ø–ï–ú purchase_price –ù–ê –û–°–ù–û–í–ï –ü–ê–†–¢–ò–ô –ò–õ–ò sales.purchase_price ---
        df = update_sales_purchase_prices(df, conn)
        # --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º cost_price –∏ profit
        df["cost_price"] = (
                df["purchase_price"] + df["delivery_to_warehouse"] + df["wb_commission_rub"] +
                df["wb_logistics"] + df["tax_rub"] + df["packaging"] +
                df["fuel"] + df["gift"] + df["defect_percent"]
        )
        df["orderscount"] = df["orderscount"].astype(int)
        df["profit"] = (df["actual_discounted_price"] - df["cost_price"]) * df["orderscount"] - df["ad_spend"]

        grouped = df.groupby("date").agg({
            "orderscount": "sum",
            "ad_spend": "sum",
            "profit": "sum"
        }).reset_index()

        grouped = grouped.rename(columns={"profit": "total_profit"})

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è JSON. –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ 'date' - datetime.
        grouped["date"] = grouped["date"].dt.strftime("%Y-%m-%d")

        return {
            "imtID": imt_id,
            "start_date": start_date,
            "end_date": end_date,
            "data": grouped.to_dict(orient="records")
        }
    finally:
        if conn:
            conn.close()


@app.get("/api/sales_overall_daily")
def get_sales_overall_daily(
        start_date: str = Query(..., description="Start date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
        end_date: str = Query(..., description="End date –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)

        query = """
                SELECT date, "ordersCount", "ad_spend", "salePrice", "purchase_price",
                       "delivery_to_warehouse", "wb_commission_rub", "wb_logistics", "tax_rub",
                       "packaging", "fuel", "gift", "defect_percent", "actual_discounted_price",
                       "vendorCode"
                FROM sales
                WHERE date BETWEEN %s
                  AND %s
                ORDER BY date ASC
                """

        df = pd.read_sql_query(query, conn, params=(start_date, end_date))
        df.columns = df.columns.str.lower()
        df["date"] = pd.to_datetime(df["date"])

        if df.empty:
            return {
                "message": f"No data between {start_date} and {end_date}",
                "data": []
            }

        df = df.fillna(0)

        df = update_sales_purchase_prices(df, conn)

        df["cost_price"] = (
                df["purchase_price"] + df["delivery_to_warehouse"] + df["wb_commission_rub"] +
                df["wb_logistics"] + df["tax_rub"] + df["packaging"] +
                df["fuel"] + df["gift"] + df["defect_percent"]
        )
        df["orderscount"] = df["orderscount"].astype(int)
        df["profit"] = (df["actual_discounted_price"] - df["cost_price"]) * df["orderscount"] - df["ad_spend"]

        grouped = df.groupby("date").agg({
            "orderscount": "sum",
            "ad_spend": "sum",
            "profit": "sum"
        }).reset_index()

        grouped = grouped.rename(columns={"profit": "total_profit"})
        grouped["date"] = grouped["date"].dt.strftime("%Y-%m-%d")

        return {
            "start_date": start_date,
            "end_date": end_date,
            "data": grouped.to_dict(orient="records")
        }
    finally:
        if conn:
            conn.close()


# --- –ù–û–í–ê–Ø Pydantic –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ø–æ—á–Ω—ã—Ö —Ü–µ–Ω –ø–æ –¥–Ω—è–º ---
class PurchasePriceHistoryDailyResponse(BaseModel):
    date: date
    purchase_price: float


class LatestCostsResponse(BaseModel):
    vendor_code: Optional[str] = None
    date: date
    purchase_price: float
    delivery_to_warehouse: float
    wb_commission_rub: float
    wb_logistics: float
    tax_rub: float
    packaging: float
    fuel: float
    gift: float
    defect_percent: float


class MissingCostEntry(BaseModel):
    vendor_code: str
    dates: List[date]


# --- –ù–û–í–´–ô –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—É–ø–æ—á–Ω—ã—Ö —Ü–µ–Ω ---
@app.get("/api/purchase_price_history_daily", response_model=List[PurchasePriceHistoryDailyResponse])
async def get_purchase_price_history_daily(
        vendor_code: str = Query(..., description="Vendor code to fetch history for"),
        start_date: date = Query(..., description="Start date for history (YYYY-MM-DD)"),
        end_date: date = Query(..., description="End date for history (YYYY-MM-DD)")
):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ vendor_code, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        query = """
                SELECT start_date, COALESCE(end_date, CURRENT_DATE) as end_date_effective, purchase_price
                FROM purchase_batches
                WHERE vendor_code = %s
                  AND (
                    (start_date <= %s AND COALESCE(end_date, '2100-01-01') >= %s) OR -- –ü–∞—Ä—Ç–∏—è –Ω–∞—á–∞–ª–∞—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
                    (start_date >= %s AND start_date <= %s) -- –ü–∞—Ä—Ç–∏—è –Ω–∞—á–∞–ª–∞—Å—å –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–æ–¥–∞
                    )
                ORDER BY start_date; \
                """
        # Adjusted end_date for query to avoid future dates for active batches for simplicity
        effective_query_end_date = min(end_date, date.today())
        cursor.execute(query, (vendor_code, effective_query_end_date, start_date, start_date, effective_query_end_date))
        batches_raw = cursor.fetchall()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        batches = []
        for b_start, b_end_eff, b_price in batches_raw:
            batches.append({
                "start_date": b_start,
                "end_date_effective": b_end_eff,
                "purchase_price": b_price
            })

        history_data = []
        current_date_iter = start_date
        while current_date_iter <= end_date:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            active_batch_price = 0.0  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            found_batch_for_day = False

            # –ò—â–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—Ç–∏—é –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            for batch in sorted(batches, key=lambda x: x['start_date'], reverse=True):
                if batch['start_date'] <= current_date_iter and batch['end_date_effective'] >= current_date_iter:
                    active_batch_price = batch['purchase_price']
                    found_batch_for_day = True
                    break  # –ù–∞—à–ª–∏ —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–∞—Ä—Ç–∏—é –Ω–∞ —ç—Ç—É –¥–∞—Ç—É

            if found_batch_for_day:
                history_data.append(
                    PurchasePriceHistoryDailyResponse(date=current_date_iter, purchase_price=active_batch_price))
            # –ï—Å–ª–∏ –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è, –º—ã –º–æ–∂–µ–º:
            # 1. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å (–≥—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –ø—Ä–µ—Ä—ã–≤–∏—Å—Ç—ã–º)
            # 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 0 (–∫–∞–∫ —Å–µ–π—á–∞—Å)
            # 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å last known price (—Å–ª–æ–∂–Ω–µ–µ)
            # 4. –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç—å price –∏–∑ sales —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.
            # –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ–≥–¥–∞ `if found_batch_for_day:`
            # –ï—Å–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0, —Ç–æ `else: history_data.append(...)` —Å 0.0
            else:
                history_data.append(PurchasePriceHistoryDailyResponse(date=current_date_iter, purchase_price=0.0))

            current_date_iter += timedelta(days=1)

        return history_data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch purchase price history: {e}")
    finally:
        if conn:
            conn.close()
        if cursor:
            cursor.close()


@app.get("/api/latest_costs", response_model=LatestCostsResponse)
async def get_latest_costs(vendor_code: str = Query(..., description="Vendor code")):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)
        query = """
                SELECT "vendorCode", purchase_price, delivery_to_warehouse,
                       wb_commission_rub, wb_logistics, tax_rub, packaging,
                       fuel, gift, defect_percent, date
                FROM sales
                WHERE "vendorCode" = %s
                ORDER BY date DESC
                LIMIT 1
                """
        df = pd.read_sql_query(query, conn, params=(vendor_code,))
        df.columns = df.columns.str.lower()
        df = df.rename(columns={"vendorcode": "vendor_code"})
        if df.empty:
            raise HTTPException(status_code=404, detail="No data for vendor code")
        row = df.iloc[0]
        return LatestCostsResponse(**row.to_dict())
    finally:
        if conn:
            conn.close()


@app.get("/api/latest_costs_all", response_model=List[LatestCostsResponse])
async def get_latest_costs_all():
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)
        query = """
                SELECT DISTINCT ON ("vendorCode") "vendorCode", purchase_price, delivery_to_warehouse,
                       wb_commission_rub, wb_logistics, tax_rub, packaging, fuel, gift, defect_percent, date
                FROM sales
                ORDER BY "vendorCode", date DESC
                """
        df = pd.read_sql_query(query, conn)
        df.columns = df.columns.str.lower()
        df = df.rename(columns={"vendorcode": "vendor_code"})
        return df.to_dict(orient="records")
    finally:
        if conn:
            conn.close()


@app.get("/api/missing_costs", response_model=List[MissingCostEntry])
def get_missing_costs(
        start_date: str = Query(..., description="Start date YYYY-MM-DD"),
        end_date: str = Query(..., description="End date YYYY-MM-DD")):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)
        query = """
                SELECT "vendorCode", date
                FROM sales
                WHERE date BETWEEN %s AND %s
                  AND (
                        purchase_price IS NULL OR purchase_price = 0 OR
                        delivery_to_warehouse IS NULL OR delivery_to_warehouse = 0 OR
                        wb_commission_rub IS NULL OR wb_commission_rub = 0 OR
                        wb_logistics IS NULL OR wb_logistics = 0 OR
                        tax_rub IS NULL OR tax_rub = 0 OR
                        packaging IS NULL OR packaging = 0 OR
                        fuel IS NULL OR fuel = 0 OR
                        gift IS NULL OR gift = 0
                      )
                ORDER BY "vendorCode", date
                """
        df = pd.read_sql_query(query, conn, params=(start_date, end_date))
        if df.empty:
            return []
        df.columns = df.columns.str.lower()
        df["date"] = pd.to_datetime(df["date"]).dt.date
        grouped = df.groupby("vendorcode")['date'].apply(lambda x: sorted(x.unique())).reset_index(name='dates')
        grouped = grouped.rename(columns={'vendorcode': 'vendor_code'})
        return grouped.to_dict(orient='records')
    finally:
        if conn:
            conn.close()


# --- –ù–û–í–ê–Ø Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–æ—á–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ ---
class PurchaseBatchCreate(BaseModel):
    vendor_code: str = Field(..., description="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")
    purchase_price: float = Field(..., gt=0, description="–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É")
    quantity_bought: int = Field(..., gt=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞—Ä—Ç–∏–∏")
    start_date: date = Field(..., description="–î–∞—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD)")


class PurchaseBatchResponse(BaseModel):
    vendor_code: str
    purchase_price: float
    quantity_bought: int
    quantity_sold: int
    is_active: bool
    start_date: date
    end_date: Optional[date]


# --- –ù–û–í–´–ô –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–æ—á–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ ---
@app.post("/api/purchase_batches")
async def create_purchase_batch(batch: PurchaseBatchCreate):
    conn = None
    cursor = None
    try:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ vendor_code
        # –í—Å–µ –ø–∞—Ä—Ç–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –¥–æ start_date –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è
        cursor.execute(
            """
            UPDATE purchase_batches
            SET is_active = FALSE,
                end_date  = %s
            WHERE vendor_code = %s
              AND is_active = TRUE
              AND (end_date IS NULL OR end_date >= %s);
            """,
            (batch.start_date, batch.vendor_code, batch.start_date)
        )

        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é
        cursor.execute(
            """
            INSERT INTO purchase_batches (vendor_code, purchase_price, quantity_bought, start_date, is_active)
            VALUES (%s, %s, %s, %s, TRUE) RETURNING id;
            """,
            (batch.vendor_code, batch.purchase_price, batch.quantity_bought, batch.start_date.strftime('%Y-%m-%d'))
        )
        batch_id = cursor.fetchone()[0]
        conn.commit()

        send_telegram_notification(
            f"‚úÖ –ù–æ–≤–∞—è –∑–∞–∫—É–ø–æ—á–Ω–∞—è –ø–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è <b>{batch.vendor_code}</b>: "
            f"{batch.quantity_bought} —à—Ç. –ø–æ {batch.purchase_price} —Ä—É–±. "
            f"–ê–∫—Ç–∏–≤–Ω–∞ —Å {batch.start_date.strftime('%Y-%m-%d')}."
        )

        return {"message": "Purchase batch created successfully", "batch_id": batch_id}
    except Exception as e:
        if conn:
            conn.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to create purchase batch: {e}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


@app.get("/api/purchase_batches", response_model=List[PurchaseBatchResponse])
async def get_purchase_batches(vendor_code: str = Query(..., description="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")):
    conn = None
    try:
        conn = psycopg2.connect(DB_URL)
        query = """
                SELECT vendor_code, purchase_price, quantity_bought, quantity_sold,
                       is_active, start_date, end_date
                FROM purchase_batches
                WHERE vendor_code = %s
                ORDER BY start_date DESC
                """
        df = pd.read_sql_query(query, conn, params=(vendor_code,))
        df.columns = df.columns.str.lower()
        return df.to_dict(orient="records")
    finally:
        if conn:
            conn.close()


# --- –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞—Ç—Ä–∞—Ç (purchase_price —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω) ---
class CostUpdate(BaseModel):
    vendorcode: str
    start_date: date  # –î–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞—Å—Ö–æ–¥—ã
    purchase_price: Optional[float] = None  # –¢–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–∏–∏
    delivery_to_warehouse: Optional[float] = None
    wb_commission_rub: Optional[float] = None
    wb_logistics: Optional[float] = None
    tax_rub: Optional[float] = None
    packaging: Optional[float] = None
    fuel: Optional[float] = None
    gift: Optional[float] = None
    defect_percent: Optional[float] = None


@app.post("/api/update_costs")
def update_costs(update: CostUpdate):
    conn = None
    cursor = None
    try:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()

        fields_to_update_sales = []
        values_to_update_sales = []
        fields_to_update_cards = []
        values_to_update_cards = []

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        updatable_fields = [
            "purchase_price",
            "delivery_to_warehouse", "wb_commission_rub",
            "wb_logistics", "tax_rub", "packaging", "fuel", "gift", "defect_percent"
        ]

        for field in updatable_fields:
            val = getattr(update, field)
            if val is not None and not (isinstance(val, float) and np.isnan(val)):
                fields_to_update_sales.append(f'"{field}" = %s')
                values_to_update_sales.append(val)
                fields_to_update_cards.append(f'"{field}" = %s')
                values_to_update_cards.append(val)
            elif isinstance(val, float) and np.isnan(val):
                fields_to_update_sales.append(f'"{field}" = %s')
                values_to_update_sales.append(0)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 0 –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –±—ã–ª–æ null
                fields_to_update_cards.append(f'"{field}" = %s')
                values_to_update_cards.append(0)

        updated_rows_sales = 0
        updated_rows_cards = 0

        if fields_to_update_sales:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É sales
            query_sales_update = f"UPDATE sales SET {', '.join(fields_to_update_sales)} WHERE \"vendorCode\" = %s AND date >= %s"
            cursor.execute(query_sales_update,
                           values_to_update_sales + [update.vendorcode, update.start_date.strftime('%Y-%m-%d')])
            updated_rows_sales = cursor.rowcount

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º cost_price –∏ total_profit –≤ —Ç–∞–±–ª–∏—Ü–µ sales
            cursor.execute(
                """
                UPDATE sales
                SET "cost_price"   = COALESCE("purchase_price", 0) + COALESCE("delivery_to_warehouse", 0) +
                                     COALESCE("wb_commission_rub", 0) + COALESCE("wb_logistics", 0) +
                                     COALESCE("tax_rub", 0) + COALESCE("packaging", 0) +
                                     COALESCE("fuel", 0) + COALESCE("gift", 0) + COALESCE("defect_percent", 0),
                    "total_profit" = (COALESCE("actual_discounted_price", 0) - (
                        COALESCE("purchase_price", 0) + COALESCE("delivery_to_warehouse", 0) +
                        COALESCE("wb_commission_rub", 0) + COALESCE("wb_logistics", 0) +
                        COALESCE("tax_rub", 0) + COALESCE("packaging", 0) +
                        COALESCE("fuel", 0) + COALESCE("gift", 0) + COALESCE("defect_percent", 0)
                        )) * COALESCE("ordersCount", 0) - COALESCE("ad_spend", 0)
                WHERE "vendorCode" = %s
                  AND date >= %s
                """,
                (update.vendorcode, update.start_date.strftime('%Y-%m-%d')),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É cards –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            if fields_to_update_cards:
                query_cards_update = f"UPDATE cards SET {', '.join(fields_to_update_cards)} WHERE \"vendor_code\" = %s"
                cursor.execute(query_cards_update, values_to_update_cards + [update.vendorcode])
                updated_rows_cards = cursor.rowcount

        conn.commit()
        return {"updated_sales_rows": updated_rows_sales, "updated_cards_rows": updated_rows_cards}
    except Exception as e:
        if conn:
            conn.rollback()
        raise e
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()


# --- –ù–û–í–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–∞—Ä—Ç–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
@app.get("/api/check_purchase_batches")
async def check_purchase_batches():
    conn = None
    cursor = None
    try:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()

        query = """
                SELECT pb.id                             AS batch_id, \
                       pb.vendor_code, \
                       pb.purchase_price, \
                       pb.quantity_bought, \
                       COALESCE(SUM(s."ordersCount"), 0) AS total_orders_since_batch_start
                FROM purchase_batches pb \
                         LEFT JOIN \
                     sales s ON pb.vendor_code = s."vendorCode" AND s.date >= pb.start_date
                WHERE pb.is_active = TRUE
                GROUP BY pb.id, pb.vendor_code, pb.purchase_price, pb.quantity_bought
                HAVING pb.quantity_bought <= COALESCE(SUM(s."ordersCount"), 0)
                ; \
                """
        cursor.execute(query)
        batches_to_deactivate = cursor.fetchall()

        notifications_sent = []
        for batch_id, vendor_code, purchase_price, quantity_bought, total_orders_since_batch_start in batches_to_deactivate:
            cursor.execute(
                """
                UPDATE purchase_batches
                SET is_active  = FALSE,
                    end_date   = %s,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = %s;
                """,
                (date.today().strftime('%Y-%m-%d'), batch_id)
            )
            message = (
                f"üö® **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–∏–∏!** üö®\n\n"
                f"–¢–æ–≤–∞—Ä: <b>{vendor_code}</b>\n"
                f"–¢–µ–∫—É—â–∞—è –ø–∞—Ä—Ç–∏—è ({quantity_bought} —à—Ç. –ø–æ {purchase_price} —Ä—É–±.) –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n"
                f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –∏–∑ —ç—Ç–æ–π –ø–∞—Ä—Ç–∏–∏ —Å {datetime.now().strftime('%Y-%m-%d')}: {total_orders_since_batch_start} —à—Ç.\n"
                f"<b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É!</b>"
            )
            send_telegram_notification(message)
            notifications_sent.append(vendor_code)

        conn.commit()
        return {"message": "Batch check completed", "deactivated_batches": notifications_sent}

    except Exception as e:
        if conn:
            conn.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to check purchase batches: {e}")
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

