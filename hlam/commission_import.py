import os
import requests
import psycopg2
from dotenv import load_dotenv

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("../backend/api.env")
DB_URL = os.getenv(
    "DB_URL",
    "postgresql://postgres:postgres@localhost:5432/wildberries",
)
WB_API_KEY = os.getenv("WB_API_KEY")

if not WB_API_KEY:
    raise Exception("‚ùå –ù–µ –∑–∞–¥–∞–Ω WB_API_KEY –≤ .env")

headers = {
    "Authorization": WB_API_KEY
}

# === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Å WB ===
def fetch_commissions():
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å Wildberries...")
    url = "https://common-api.wildberries.ru/api/v1/tariffs/commission"

    try:
        response = requests.get(url, headers=headers)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)
        response.raise_for_status()

        raw_data = response.json()
        if not isinstance(raw_data, dict):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è dict, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(raw_data)}")

        data = raw_data.get("report", [])
        if not isinstance(data, list):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(data)}")

        commissions = {
            item["subjectName"].strip().lower(): item["kgvpSupplier"]
            for item in data if "subjectName" in item and "kgvpSupplier" in item
        }

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {len(commissions)}")
        return commissions

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        return {}


# === 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ cards ===
def update_commissions_in_db(commissions_dict):
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    conn = psycopg2.connect(DB_URL)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∏–º –∏ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–ª–æ–Ω–∫—É commission_percent, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE cards ADD COLUMN commission_percent REAL")
        conn.commit()
        print("üåü –ö–æ–ª–æ–Ω–∫–∞ commission_percent –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except psycopg2.errors.DuplicateColumn:
        conn.rollback()
    except Exception as e:
        conn.rollback()
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ commission_percent: {e}")

    updated = 0
    for subject_name, commission in commissions_dict.items():
        cursor.execute(
            """
            UPDATE cards
            SET commission_percent = %s
            WHERE LOWER(TRIM(subject_name)) = %s
            """,
            (commission, subject_name)
        )
        updated += cursor.rowcount

    conn.commit()
    conn.close()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {updated}")


# === 3. –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    commissions = fetch_commissions()
    if commissions:
        update_commissions_in_db(commissions)
    else:
        print("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
