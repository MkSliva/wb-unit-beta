import sqlite3  # –†–∞–±–æ—Ç–∞ —Å SQLite
import requests  # HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ API
import os  # –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv  # –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ api.env
load_dotenv("../backend/api.env")

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á Wildberries –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
WB_API_KEY = os.getenv("WB_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if not WB_API_KEY:
    raise Exception("‚ùå –ù–µ –∑–∞–¥–∞–Ω WB_API_KEY –≤ .env")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
headers = {
    "Authorization": WB_API_KEY
}


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def fetch_commissions():
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å Wildberries...")

    url = "https://common-api.wildberries.ru/api/v1/tariffs/commission"

    try:
        response = requests.get(url, headers=headers)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É —Å—Ç–∞—Ç—É—Å–∞

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON
        raw_data = response.json()


        # –û—Ç–≤–µ—Ç API ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º 'data'
        if not isinstance(raw_data, dict):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è dict, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(raw_data)}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∏—Å—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        data = raw_data.get("report", [])


        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–∏—Å–æ–∫ ‚Äî –æ—à–∏–±–∫–∞
        if not isinstance(data, list):
            raise Exception(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫, –Ω–æ –ø—Ä–∏—à–ª–æ: {type(data)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å: –∫–ª—é—á ‚Äî subjectName, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–º–∏—Å—Å–∏—è
        commissions = {
            item["subjectName"]: item["kgvpSupplier"]
            for item in data if "subjectName" in item and "kgvpSupplier" in item
        }

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {len(commissions)}")
        return commissions

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–π: {e}")
        return {}


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_commissions_in_db(commissions_dict):
    print("üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    conn = sqlite3.connect("../backend/wildberries_cards.db")
    cursor = conn.cursor()

    updated = 0

    for subject_name, commission in commissions_dict.items():
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        cursor.execute("""
                       UPDATE cards
                       SET commission_percent = ?
                       WHERE subjectName = ?
                       """, (commission, subject_name))
        updated += cursor.rowcount

    conn.commit()
    conn.close()
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {updated}")


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    commissions = fetch_commissions()
    if commissions:
        update_commissions_in_db(commissions)
    else:
        print("‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")




