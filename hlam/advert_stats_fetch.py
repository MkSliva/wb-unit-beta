import requests
from datetime import datetime, timedelta
import json
from collections import defaultdict

# üîê –£–∫–∞–∂–∏ –∑–¥–µ—Å—å —Å–≤–æ–π API-–∫–ª—é—á Wildberries
API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjUwNTIwdjEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc2NDkyOTQ5MSwiaWQiOiIwMTk3NDIyNi0zY2VmLTdlMDctODgzNS1iMDlmNzdjMmJmZWMiLCJpaWQiOjIwMDEwODE3LCJvaWQiOjEzODY0NjcsInMiOjEwNzM3NTc5NTAsInNpZCI6IjE5MzhhN2NmLWE5YjMtNDhmOC1hYjUyLWVmMGMzMjU2OWJhYiIsInQiOmZhbHNlLCJ1aWQiOjIwMDEwODE3fQ._hZYYZ6vb3jDb_oAUMSs3nfy7CvgsMNUXy62eai2VSiwj1Q0zcdGoEVJK_nbNMsPAVpu8poWMKcyV8RP0V3x4Q"

# üìÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")

def get_all_campaign_ids(api_key: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
    url = "https://advert-api.wildberries.ru/adv/v1/promotion/count"
    headers = {
        "Authorization": api_key
    }

    print("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π...")
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π: {response.status_code} ‚Äî {response.text}")
        return []

    try:
        data = response.json()
        campaign_ids = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
        for campaign_group in data.get("adverts", []):
            advert_list = campaign_group.get("advert_list", [])
            for advert in advert_list:
                campaign_id = advert.get("advertId")
                if campaign_id:
                    campaign_ids.append(campaign_id)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(campaign_ids)} –∫–∞–º–ø–∞–Ω–∏–π.")
        return campaign_ids

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞:", e)
        return []


# üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Wildberries (—Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π)
# –ó–∞–º–µ–Ω–∏—Ç–µ ID –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ campaignId
campaign_ids = get_all_campaign_ids(API_KEY)

# –°—Ç—Ä–æ–∏–º request_body –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
request_body = [
    {
        "id": cid,
        "dates": [yesterday]
    }
    for cid in campaign_ids
]


# üßæ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
headers = {
    "Content-Type": "application/json",
    "Authorization": API_KEY
}

# üåê URL API Wildberries –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
url = "https://advert-api.wildberries.ru/adv/v2/fullstats"

# üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞ –¥–∞—Ç—É: {yesterday}")
response = requests.post(url, headers=headers, data=json.dumps(request_body))

# üßæ –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
if response.status_code != 200:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", response.text)
    exit()

# üì¶ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ Python-–æ–±—ä–µ–∫—Ç
data = response.json()

# üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
if not data or not isinstance(data, list):
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ.")
    exit()

# üîç –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º, –¥–Ω—è–º, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ —Ç–æ–≤–∞—Ä–∞–º
print("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...\n")
print("üîç –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ nmID...\n")

# üìä –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ nmID
aggregated = defaultdict(lambda: {
    "views": 0, "clicks": 0, "ctr": 0, "cpc": 0, "sum": 0,
    "atbs": 0, "orders": 0, "cr": 0, "shks": 0, "sum_price": 0,
    "name": "", "campaign_id": 0, "date": ""
})

for campaign in data:
    campaign_id = campaign.get("advertId")
    for day in campaign.get("days", []):
        date_str = day.get("date")
        for app in day.get("apps", []):
            for item in app.get("nm", []):
                nm_id = item.get("nmId")
                group = aggregated[nm_id]

                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                group["views"] += item.get("views", 0)
                group["clicks"] += item.get("clicks", 0)
                group["sum"] += item.get("sum", 0)
                group["atbs"] += item.get("atbs", 0)
                group["orders"] += item.get("orders", 0)
                group["shks"] += item.get("shks", 0)
                group["sum_price"] += item.get("sum_price", 0)

                # –î–ª—è –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏
                group["name"] = item.get("name", "")
                group["campaign_id"] = campaign_id
                group["date"] = date_str

# üéØ –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç CTR, CPC, CR
for nm_id, data in sorted(aggregated.items()):
    views = data["views"]
    clicks = data["clicks"]
    orders = data["orders"]

    data["ctr"] = round((clicks / views) * 100, 2) if views else 0
    data["cpc"] = round(data["sum"] / clicks, 2) if clicks else 0
    data["cr"] = round((orders / clicks) * 100, 2) if clicks else 0

    # üì§ –í—ã–≤–æ–¥
    print(f"üì¶ –¢–æ–≤–∞—Ä:")
    print(f"  üìÖ –î–∞—Ç–∞: {data['date']}")
    print(f"  üì¢ –ö–∞–º–ø–∞–Ω–∏—è ID: {data['campaign_id']}")
    print(f"  üÜî –ê—Ä—Ç–∏–∫—É–ª (nmID): {nm_id}")
    print(f"  üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}")
    print(f"  üëÅ –ü–æ–∫–∞–∑—ã: {views}")
    print(f"  üñ± –ö–ª–∏–∫–∏: {clicks}")
    print(f"  üîÅ CTR: {data['ctr']}%")
    print(f"  üí∞ CPC: {data['cpc']} ‚ÇΩ")
    print(f"  üí∏ –ó–∞—Ç—Ä–∞—Ç—ã: {data['sum']} ‚ÇΩ")
    print(f"  üõí –í –∫–æ—Ä–∑–∏–Ω—É: {data['atbs']}")
    print(f"  üì¶ –ó–∞–∫–∞–∑—ã: {orders}")
    print(f"  üéØ CR: {data['cr']}%")
    print(f"  üì§ –û—Ç–≥—Ä—É–∑–∫–∏: {data['shks']}")
    print(f"  üìà –í—ã—Ä—É—á–∫–∞: {data['sum_price']} ‚ÇΩ")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")





